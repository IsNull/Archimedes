using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Linq.Expressions;
using System.Threading;
using System.Reflection;

namespace Archimedes.Patterns.MVMV
{

    /// <summary>
    /// Base Class for INotifyPropertyChanged types
    /// </summary>
    public class NotifyChangedBase : INotifyPropertyChanged
    {
        #region Fields

        static Dictionary<string, PropertyChangedEventArgs> _eventArgsMap = new Dictionary<string, PropertyChangedEventArgs>();

        Dictionary<string, List<Action<object>>> _typedInvokerMap = new Dictionary<string, List<Action<object>>>();
        PropertyChangedEventHandler _propChangedHandler;

        #endregion

        #region INotifyPropertyChanged

        public event PropertyChangedEventHandler PropertyChanged {
            add {
                _propChangedHandler = (PropertyChangedEventHandler)Delegate.Combine(_propChangedHandler, value);
            }
            remove {
                if (_propChangedHandler != null)
                    _propChangedHandler = (PropertyChangedEventHandler)Delegate.Remove(_propChangedHandler, value);
            }
        }

        #endregion

        /// <summary>
        /// Eventhandler which invokes the OnPropertyChanged Method.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected virtual void OnPropertyChangedInvoker(object sender, PropertyChangedEventArgs e) {
            if (_propChangedHandler != null) {
                _propChangedHandler(this, e);
            }
        }

        public void RegisterPropertyChangedEvent(Expression<Func<object>> property, Action<object> callback) {
            var name = Lambda.GetPropertyName(property);
            if (!_typedInvokerMap.ContainsKey(name)) {
                _typedInvokerMap.Add(name, new List<Action<object>>());
            }
            _typedInvokerMap[name].Add(callback);
        }

        /// <summary>
        /// Updates the given Property identified by Expression
        /// </summary>
        /// <param name="expressions"></param>
        public virtual void UpdateProperty(params Expression<Func<object>>[] expressions) {
            OnPropertyChanged(expressions);
        }

        #region Notify Helpers

        /// <summary>
        /// Notifies all listener that the given Property(s) have changed.
        /// </summary>
        /// <param name="expressions">Lambda Expression which references one ore more Property/ies</param>
        protected void OnPropertyChanged(params Expression<Func<object>>[] expressions) {
            if (expressions == null)
                throw new ArgumentNullException("expressions", "You need to provide at least one expression");
            if (expressions.Length <= 0)
                throw new ArgumentOutOfRangeException("expressions", "You need to provide at least one expression");

            string[] propertyNames = GetPropertyNames(expressions);

            OnPropertysChangedInternal(propertyNames);
        }

        /// <summary>
        ///  Notifies all listener that the given Property has changed.
        /// </summary>
        /// <param name="propertyName"></param>
        protected void OnPropertyChanged(string propertyName)
        {
            if (_propChangedHandler != null)
            {
                var args = GetEventArgs(propertyName);
                OnPropertyChanged(args);
            }

            if (_typedInvokerMap.ContainsKey(propertyName))
            {
                foreach (var a in _typedInvokerMap[propertyName])
                    a(this);
            }
        }

        /// <summary>
        ///  Notifies all listener that the given Property has changed.
        /// </summary>
        /// <param name="args"></param>
        protected void OnPropertyChanged(PropertyChangedEventArgs args)
        {
            if (_propChangedHandler != null)
                _propChangedHandler(this, args);
        }


        

        protected string[] GetPropertyNames(Expression<Func<object>>[] expressions) {
            string[] propertyNames = new string[expressions.Length];
            for (int i = 0; i < expressions.Length; i++) {
                propertyNames[i] = Lambda.GetPropertyName(expressions[i]);
            }
            return propertyNames;
        }




        void OnPropertysChangedInternal(params string[] propertyNames) {
            if ((propertyNames == null) || (propertyNames.Length == 0))
                throw new ArgumentNullException("propertyNames");
            if (_propChangedHandler == null)
                return;

            foreach (string propertyName in propertyNames)
                OnPropertyChanged(propertyName);
        }

<<<<<<< HEAD
=======
        /// <summary>
        /// Notifies all listeners that the given property has been changed
        /// </summary>
        /// <param name="propertyName"></param>
        protected void OnPropertyChanged(string propertyName) {
            if (_propChangedHandler != null) {
                var args = GetEventArgs(propertyName);
                _propChangedHandler(this, args);
            }

            if (_typedInvokerMap.ContainsKey(propertyName)) {
                foreach (var a in _typedInvokerMap[propertyName])
                    a(this);
            }
        }
>>>>>>> b6a53a9803f1159204f93c5cec00505014ede8be

        static PropertyChangedEventArgs GetEventArgs(string propertyName) {
            PropertyChangedEventArgs pe = null;
            if (_eventArgsMap.TryGetValue(propertyName, out pe) == false) {
                pe = new PropertyChangedEventArgs(propertyName);
                _eventArgsMap[propertyName] = pe;
            }
            return pe;
        }

        #endregion
    }
}
